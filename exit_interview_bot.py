import logging
import json
import httpx
from typing import Dict, Any
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from sqlalchemy import create_engine, Column, Integer, String, Text
from sqlalchemy.orm import sessionmaker, declarative_base
from models import engine, session, Base, SurveyResponse, SessionLocal

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                     level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SURVEY_IN_PROGRESS, ANSWERING_QUESTION = range(2)

        
class SurveyBot:
    def __init__(self, survey_config: Dict[str, Any]):
        self.questions = survey_config["questions"]
        self.user_sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        user = update.message.from_user
        user_id = user.id
        
        self.user_sessions[user_id] = {
            'answers': {},
            'current_question_index': 0,
            'user_data': {
                'id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name
            }
        }
        
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø—Ä–æ—Å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /cancel.\n\n"
            "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ReplyKeyboardRemove()
        )
        
        await self.ask_question(update, context, user_id)
        return ANSWERING_QUESTION
    
    async def ask_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        session = self.user_sessions[user_id]
        question_index = session['current_question_index']
        
        if question_index >= len(self.questions):
            await self.finish_survey(update, context, user_id)
            return ConversationHandler.END
        
        question = self.questions[question_index]
        question_text = f"–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(self.questions)}:\n{question['text']}"
        
        if not question["required"]:
            question_text += "\n\n(–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)"
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=question_text
        )
    
    async def handle_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        user_id = update.message.from_user.id
        session = self.user_sessions.get(user_id)
        
        if not session:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
            return ConversationHandler.END
        
        question = self.questions[session['current_question_index']]
        answer = update.message.text
        
        if question["required"] and not answer.strip():
            await update.message.reply_text("–≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ.")
            return ANSWERING_QUESTION




        prompt = {
          "model": "anthropic/claude-3-sonnet",  # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é –º–æ–¥–µ–ª—å
          "messages": [
              {"role": "system", "content": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞–µ—Ç –≥–ª—É–±–æ–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."},
              {"role": "user", "content": f"""
                  –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
                  {question["text"]}
                  
                  –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {answer}
                  
                  –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∏ —Å–∫–∞–∂–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ª–∏ –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ —Å—Ç–æ–∏—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å –¥–∞–ª–µ–µ:
              """}
          ],
          "temperature": 0.7,
          "max_tokens": 150
        }

        headers = {
          "Authorization": f"Bearer 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"
        }


        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                json=prompt,
                headers=headers
            )
            response.raise_for_status()
            data = response.json()
            
            logger.info(f"Data {data}")
            
            return data['choices'][0]['message']['content'].strip()






        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
        self._save_to_db(user_id, question["text"], answer)
        
        session['answers'][question["id"]] = answer
        session['current_question_index'] += 1
        
        await self.ask_question(update, context, user_id)
        return ANSWERING_QUESTION if session['current_question_index'] < len(self.questions) else ConversationHandler.END
      
    def _save_to_db(self, user_id: int, question: str, answer: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = SessionLocal()
            db.add(SurveyResponse(
                user_id=user_id,
                question=question,
                answer=answer
            ))
            db.commit()
            logger.info(f"–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: user_id={user_id}, question={question}")
        except Exception as e:
            db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        finally:
            db.close()
            
    async def finish_survey(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        session = self.user_sessions[user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        report = "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n"
        for q in self.questions:
            answer = session['answers'].get(q["id"], "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)")
            report += f"‚ùì {q['text']}\nüìù –û—Ç–≤–µ—Ç: {answer}\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=report
        )
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
        logger.info(f"User {user_id} completed survey. Answers: {session['answers']}")
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del self.user_sessions[user_id]
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        user_id = update.message.from_user.id
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
        
        await update.message.reply_text(
            "–û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

# –ó–∞–≥—Ä—É–∑–∫–∞ JSON –∏–∑ —Ñ–∞–π–ª–∞
def load_survey_config(file_path: str) -> Dict[str, Any]:
    with open(file_path, 'r', encoding='utf-8') as f:
        return json.load(f)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Update {update} caused error {context.error}")
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    )

def main() -> None:
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –æ–ø—Ä–æ—Å–∞
        config = load_survey_config("exit_interview_questions.json")  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        bot = SurveyBot(config)
        
        # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', bot.start)],
            states={
                ANSWERING_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_answer)]
            },
            fallbacks=[CommandHandler('cancel', bot.cancel)],
            allow_reentry=True
        )
        
        application.add_handler(conv_handler)
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()
    
    except FileNotFoundError:
        logger.error("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –æ–ø—Ä–æ—Å–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    except KeyError:
        logger.error("–û—à–∏–±–∫–∞: –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()

import sqlite3, json, requests
from telegram import Update, InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from openai import OpenAI
from datetime import datetime
import logging


# –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∏ OpenRouter
TELEGRAM_BOT_TOKEN = '7940286497:AAEd3jTyA8bu3N4pmDcz8qYz49eJvDs_LVg'
OPENROUTER_API_KEY = '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'
DATABASE_NAME = 'interviews.db'

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø—Ä–æ—Å–∞
ACTIVE_SESSION = True
INACTIVE_SESSION = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –æ–∂–∏–¥–∞–µ–º–æ–≥–æ JSON –æ—Ç–≤–µ—Ç–∞
json_schema = {
    "type": "object",
    "properties": {
        "answer": {"type": "string", "description": "–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"},
        "is_enough": {"type": "string", "enum": ["–¥–∞", "–Ω–µ—Ç"], "description": "–û—Ü–µ–Ω–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."},
        "explanation": {"type": "string", "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É –æ—Ç–≤–µ—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º."}
    },
    "required": ["answer", "is_enough", "explanation"]
}

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
client = OpenAI(
    api_key='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', # This should ideally be an environment variable
    base_url="https://openrouter.ai/api/v1",
)

# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
system_prompt = f"""
–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ, —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å—Ö–µ–º–µ:

```json
{json.dumps(json_schema, indent=2, ensure_ascii=False)}
```
–ó–∞–¥–∞—á–∞ –∏–Ω—Ç–µ—Ä–≤—å—é - –ø–æ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—ã —É–≤–æ–ª—å–Ω–µ–Ω–∏—è, –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å 
–æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º, –Ω–æ –∫—Ä–∞—Ç–∫–∏–º, –∑–∞–¥–∞–≤–∞–π 
–≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –∫ –æ—Ç–≤–µ—Ç–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –°—Ç–∞—Ä–∞–π—Å—è —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏—é: 
–≥–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä, –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö (–¥–æ —Ç—Ä—ë—Ö), –æ—Ñ—Ñ–µ—Ä, –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º, 
–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–º–∞—Ç, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, —á—Ç–æ —Å—Ç–æ–∏—Ç –∏–∑–º–µ–Ω–∏—Ç—å. 
–ï—Å–ª–∏ –ø–æ–π–º–µ—à—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–µ–ª–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–≤–µ—Ä—à–∏ –æ–ø—Ä–æ—Å.

- –ü–æ–ª–µ \"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å\": –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —á–µ—Ç–∫–∏–π –∏ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- –ü–æ–ª–µ \"–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ—Ç–≤–µ—Ç–∞\": –£–∫–∞–∂–∏ '–¥–∞', –µ—Å–ª–∏ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–º. –£–∫–∞–∂–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
- –ü–æ–ª–µ \"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ\": –ö—Ä–∞—Ç–∫–æ –ø–æ—è—Å–Ω–∏, –ø–æ—á–µ–º—É —Ç—ã —Å—á–∏—Ç–∞–µ—à—å –æ—Ç–≤–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç '–Ω–µ—Ç', —É–∫–∞–∂–∏, –∫–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.
"""



def create_database():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS interviews2 (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            start_time TEXT NOT NULL,
            end_time TEXT,
            dialog TEXT NOT NULL,
            summary TEXT
        );
    ''')
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    
    keyboard = [
        [KeyboardButton(text="üî• –ù–∞—á–∞—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    # await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    # keyboard = [
    #     [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é", callback_data="button_start")],
    #     [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    # ]
    # reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, —è HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é. "
        "–Ø –∑–Ω–∞—é, —á—Ç–æ –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∫–∏–Ω—É—Ç—å –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é. –ú–Ω–µ –±—ã –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —É –Ω–∞—Å, —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–∏ –º—ã—Å–ª–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é', –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
        reply_markup=reply_markup
    )
  
async def button_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å'"""
    
  
    
    await update.message.reply_text("–û–ø–∏—à–∏ –æ–¥–Ω–∏–º‚Äì–¥–≤—É–º—è –∞–±–∑–∞—Ü–∞–º–∏ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–ª —Ä–µ—à–∞—é—â–∏–º –≤ —Ç–≤–æ—ë–º —Ä–µ—à–µ–Ω–∏–∏ —É–≤–æ–ª–∏—Ç—å—Å—è. –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ã–º?")
    context.user_data['state'] = ACTIVE_SESSION
    context.user_data['answers'] = []
    context.user_data['dialog'] = []
    context.user_data['messages'] = []
    context.user_data['last_question'] = ""
    context.user_data['start_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

async def button_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –æ–ø—Ä–æ—Å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ, –Ω–∞–±—Ä–∞–≤ /start")
    context.user_data.clear()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != ACTIVE_SESSION:
      return

    user_answer = update.message.text.strip()
    chat_id = str(update.effective_chat.id)
    
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –¥–∏–∞–ª–æ–≥
    last_question = context.user_data.get('last_question', '')
    context.user_data.setdefault('dialog', [])
    context.user_data['dialog'].extend([f"–ë–æ—Ç: {last_question}", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_answer}"])
    
    context.user_data['answers'].append(user_answer)
    
    context.user_data['messages'].append({
                "role": "assistant",
                "content": last_question
            })
    context.user_data['messages'].append({
                "role": "user",
                "content": user_answer
            })
    # next_question = generate_next_question(chat_id, context.user_data['answers'])
    
    
    # # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç
    # if not hasattr(context.user_data, 'answers'):
    #     context.user_data['answers'] = []
    # context.user_data['answers'].append(user_answer)

    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –≤ OpenRouter –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    next_question = generate_next_question(chat_id, context.user_data['answers'])
    next_question_text = next_question['answer']
    
    print(f"next_question {next_question}")
    print(f"next_question_text {next_question_text}")

    if next_question['is_enough'] == '–¥–∞':
      await finish_survey(update, context)
    else:
      await update.message.reply_text(next_question['answer'])



def generate_next_question(employee_id, previous_answers):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        response_format={"type": "json_object"},
        messages=[
            {"role": "system", "content": system_prompt},
            *[{"role": "user", "content": answer} for answer in previous_answers]
        ],
    )

    try:
        result = json.loads(response.choices[0].message.content)
        print(json.dumps(result, indent=2, ensure_ascii=False))

        return result

    except json.JSONDecodeError:
        print("Error decoding JSON from API response:")
        print(response.choices[0].message.content)


async def finish_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    final_summary = '\n'.join(context.user_data.get('answers', []))
    full_dialog = '\n'.join(context.user_data.get('dialog', []))
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = update.effective_user.id
    username = update.effective_user.username
    start_time = context.user_data.get('start_time', '')  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    final_summary = await generate_interview_summary(context.user_data.get('messages'))
    
    print(f"!!!! {final_summary}")
    
    save_interview(user_id, username, start_time, now, full_dialog, final_summary)
    
    
    # save_to_db(str(update.effective_chat.id), context)
    
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n–í–∞—à –æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.\n–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n\n{final_summary}")
    context.user_data['state'] = INACTIVE_SESSION
    del context.user_data['answers']

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.edit_message_text("–ò–Ω—Ç–µ—Ä–≤—å—é –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data['state'] = INACTIVE_SESSION
    await finish_survey(update, context)


def save_interview(user_id, username, start_time, end_time, dialog, summary):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO interviews2 (user_id, username, start_time, end_time, dialog, summary)
        VALUES (?, ?, ?, ?, ?, ?);
    """, (user_id, username, start_time, end_time, dialog, summary))
    conn.commit()
    conn.close()


async def generate_interview_summary(messages: str) -> str:
    dialog = "\n".join([f"{m['role']}: {m['content']}" for m in messages])

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã
    response = client.chat.completions.create(
        model="anthropic/claude-3-opus",
        response_format={"type": "json_object"},
        messages=[
            {
                "role": "system",
                "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ exit interview –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏: "
                           "1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —É–≤–æ–ª—å–Ω–µ–Ω–∏—è. "
                           "2. –ö—Ä–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏/–ø—Ä–æ—Ü–µ—Å—Å–æ–≤. "
                           "3. –ü–æ–∂–µ–ª–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. "
                           "4. –û–±—â–∏–π —Ç–æ–Ω –∏–Ω—Ç–µ—Ä–≤—å—é (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π). "
                           "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."
            },
            {
                "role": "user",
                "content": dialog
            }
        ],
    )

    return response.choices[0].message.content
       



if __name__ == '__main__':
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    create_database()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^üî• –ù–∞—á–∞—Ç—å$"), button_start))
    application.add_handler(MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å$"), button_cancel))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("Telegram bot started...")
    application.run_polling()
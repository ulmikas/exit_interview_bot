import sqlite3
import json
import logging
from datetime import datetime

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–ª—é—á–µ–π
with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
ACTIVE_SESSION = True
INACTIVE_SESSION = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∏–µ–Ω—Ç OpenAI/OpenRouter
client = OpenAI(
    api_key=config['OPENROUTER_API_KEY'],
    base_url="https://openrouter.ai/api/v1",
)

# –°–ü–ò–°–û–ö –í–û–ü–†–û–°–û–í –î–õ–Ø –ò–ù–¢–ï–†–í–¨–Æ (—Ç–µ–ø–µ—Ä—å –≤ –∫–æ–¥–µ)
QUESTIONS = [
    "1. –û–ø–∏—à–∏ –æ–¥–Ω–∏–º‚Äì–¥–≤—É–º—è –∞–±–∑–∞—Ü–∞–º–∏ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–ª —Ä–µ—à–∞—é—â–∏–º –≤ —Ç–≤–æ—ë–º —Ä–µ—à–µ–Ω–∏–∏ —É–≤–æ–ª–∏—Ç—å—Å—è. –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ã–º?",
    "2. –†–∞—Å—Å–∫–∞–∂–∏ –æ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö (–¥–æ —Ç—Ä—ë—Ö), –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–∂–µ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ —Ç–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ. –ß–µ–º –æ–Ω–∏ –±—ã–ª–∏ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω—ã?",
    "3. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ñ—Ñ–µ—Ä? –ï—Å–ª–∏ –¥–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ—Ç –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è —Ç–µ–±—è –ø—Ä–∏–≤–ª–µ–∫–ª–∏. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ—á–µ–º—É?",
    "4. –£–∫–∞–∂–∏ –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–≤–∏–ª —Ç–µ–±–µ –∑–∞–¥–∞—á–∏ –∏ –¥–∞–≤–∞–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
    "5. –ö–∞–∫ —Å–∫–ª–∞–¥—ã–≤–∞–ª–∏—Å—å —Ç–≤–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º? –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã —É–¥–∞—á–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.",
    "6. –û–ø–∏—à–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–º–∞—Ç –≤ —Å–≤–æ—ë–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏: —á—Ç–æ –ø–æ–º–æ–≥–∞–ª–æ –∏ —á—Ç–æ –º–µ—à–∞–ª–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ?",
    "7. –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏? –ö–∞–∫–∏–µ –±–∞—Ä—å–µ—Ä—ã –∏–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç—ã –≤–∏–¥–µ–ª?",
    "8. –ù–∞—Å–∫–æ–ª—å–∫–æ, –ø–æ —Ç–≤–æ–µ–º—É –æ–ø—ã—Ç—É, –∫–æ–º–ø–∞–Ω–∏—è –∑–∞–±–æ—Ç–∏–ª–∞—Å—å –æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤? –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è.",
    "9. –ß—Ç–æ, –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, —Å—Ç–æ–∏—Ç –∏–∑–º–µ–Ω–∏—Ç—å, –≤–Ω–µ–¥—Ä–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ü–µ–ª–æ–º? –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
]

# --- –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ---

def create_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn = sqlite3.connect(config['DATABASE_NAME'])
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS interviews2 (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            start_time TEXT NOT NULL,
            end_time TEXT,
            dialog TEXT NOT NULL,
            summary TEXT
        );
    ''')
    conn.commit()
    conn.close()

def save_interview(user_id, username, start_time, end_time, dialog, summary):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(config['DATABASE_NAME'])
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO interviews2 (user_id, username, start_time, end_time, dialog, summary)
        VALUES (?, ?, ?, ?, ?, ?);
    """, (user_id, username, start_time, end_time, dialog, summary))
    conn.commit()
    conn.close()
    logger.info(f"–ò–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ú–û–î–ï–õ–¨–Æ ---

async def generate_interview_summary(messages: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –¥–∏–∞–ª–æ–≥—É —Å –ø–æ–º–æ—â—å—é LLM."""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    dialog_text = "\n".join([f"{m['role'].capitalize()}: {m['content']}" for m in messages])

    system_prompt_summary = (
        "–¢—ã ‚Äî HR-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ exit-–∏–Ω—Ç–µ—Ä–≤—å—é –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç. "
        "–í –æ—Ç—á–µ—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã:\n"
        "1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —É–≤–æ–ª—å–Ω–µ–Ω–∏—è (–≥–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ).\n"
        "2. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ –∏ –∫–æ–º–∞–Ω–¥–µ.\n"
        "3. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏.\n"
        "4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.\n"
        "5. –û–±—â–∏–π —Ç–æ–Ω –∏–Ω—Ç–µ—Ä–≤—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π, –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π).\n"
        "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –≤ –±–µ–∑–ª–∏—á–Ω–æ–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ."
    )

    try:
        response = client.chat.completions.create(
            model="anthropic/claude-3-sonnet", # –ò—Å–ø–æ–ª—å–∑—É–µ–º Sonnet, –æ–Ω –¥–µ—à–µ–≤–ª–µ –∏ –±—ã—Å—Ç—Ä–µ–µ Opus –¥–ª—è —Ç–∞–∫–∏—Ö –∑–∞–¥–∞—á
            messages=[
                {"role": "system", "content": system_prompt_summary},
                {"role": "user", "content": dialog_text}
            ],
            max_tokens=1024,
        )
        summary = response.choices[0].message.content
        logger.info("–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
        return summary
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏."

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô –¢–ï–õ–ï–ì–†–ê–ú ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é."""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    
    keyboard = [[KeyboardButton(text="üî• –ù–∞—á–∞—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≥–æ—Ä—å, —è –ø–æ–º–æ—â–Ω–∏–∫ HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ò–¢. –Ø –∑–Ω–∞—é, —á—Ç–æ –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∫–∏–Ω—É—Ç—å –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é.\n\n" 
        "–ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–∞–π–º –±—ã–≤—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ 20-25%, —Ç–∞–∫ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —á–∞—Å—Ç–æ —É—Ö–æ–¥—è—Ç –∑–∞ –Ω–æ–≤—ã–º –æ–ø—ã—Ç–æ–º, –Ω–æ –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è. –ú–Ω–µ –±—ã –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —É –Ω–∞—Å, —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–∏ –º—ã—Å–ª–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –±—É–¥—É—â–µ–º. –ß—Ç–æ–±—ã –∫–æ–≥–¥–∞ –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –∫ –Ω–∞–º –Ω–∞ —Ä–∞–±–æ—Ç—É –º—ã —Å—Ç–∞–ª–∏ –ª—É—á—à–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é', –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
        reply_markup=reply_markup
    )

async def button_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å'."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –∏–Ω—Ç–µ—Ä–≤—å—é.")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = ACTIVE_SESSION
    context.user_data['start_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    context.user_data['question_index'] = 0
    
    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    first_question = QUESTIONS[0]
    context.user_data['messages'] = [{"role": "assistant", "content": first_question}]
    
    await update.message.reply_text(first_question)

async def button_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ–ø—Ä–æ—Å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –∏–Ω—Ç–µ—Ä–≤—å—é.")
    await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ, –Ω–∞–±—Ä–∞–≤ /start")
    context.user_data.clear()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã."""
    if context.user_data.get('state') != ACTIVE_SESSION:
        return

    user_answer = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.setdefault('messages', []).append({"role": "user", "content": user_answer})
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
    current_index = context.user_data.get('question_index', 0)
    next_index = current_index + 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
    if next_index < len(QUESTIONS):
        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = QUESTIONS[next_index]
        await update.message.reply_text(next_question)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
        context.user_data['messages'].append({"role": "assistant", "content": next_question})
        context.user_data['question_index'] = next_index
    else:
        # –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        await finish_survey(update, context)

async def finish_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}.")
    
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –°–µ–π—á–∞—Å —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...")

    messages = context.user_data.get('messages', [])
    dialog_for_db = json.dumps(messages, ensure_ascii=False, indent=2)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    final_summary = await generate_interview_summary(messages)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = update.effective_user.id
    username = update.effective_user.username
    start_time = context.user_data.get('start_time', '')
    end_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    save_interview(user_id, username, start_time, end_time, dialog_for_db, final_summary)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏ —Å–∞–º –æ—Ç—á–µ—Ç
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n–í–∞—à –æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n--- –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç ---\n\n{final_summary}"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

if __name__ == '__main__':
    application = ApplicationBuilder().token(config['TELEGRAM_BOT_TOKEN']).build()

    create_database()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^üî• –ù–∞—á–∞—Ç—å$"), button_start))
    application.add_handler(MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å$"), button_cancel))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()
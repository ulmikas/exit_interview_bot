import sqlite3, json, requests
from telegram import Update, InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from openai import OpenAI
from datetime import datetime
import logging


# –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∏ OpenRouter
with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)


# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø—Ä–æ—Å–∞
ACTIVE_SESSION = True
INACTIVE_SESSION = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
client = OpenAI(
    api_key=config['OPENROUTER_API_KEY'],
    base_url="https://openrouter.ai/api/v1",
)

system_prompt = f"""
–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HR-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç —É–≤–æ–ª–∏–≤—à–∏—Ö—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è—Ç—å –¥–µ—Ç–∞–ª–∏, –Ω–æ –Ω–µ –¥–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. 
–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É:

1. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—Ä–æ–≥–æ –ø–æ –æ–¥–Ω–æ–º—É
2. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π - –∑–∞–¥–∞–π 1-2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞
3. –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç–≤–µ—á–∞—Ç—å - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
4. –°–ª–µ–¥–∏ –∑–∞ —Ç–æ–Ω–æ–º: —Å–æ—Ö—Ä–∞–Ω—è–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
5. –ö–æ–≥–¥–∞ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –±—É–¥—É—Ç —Ä–∞—Å–∫—Ä—ã—Ç—ã –∏–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–∞–∂–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å - –∑–∞–≤–µ—Ä—à–∏ –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤—å STOP

–¢–µ–º—ã –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤ —Å—Ç—Ä–æ–≥–æ–º –ø–æ—Ä—è–¥–∫–µ:
1. –ì–ª–∞–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
2. –¥—É—Ä–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
3. –ù–∞–ª–∏—á–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
4. –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
5. –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º
6. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–º–∞—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
7. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ—Ä–∞–∑–≤–∏—Ç–∏—è
8. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–¥–∞–≤–∞–π –±–æ–ª—å—à–µ 15 –≤–æ–ø—Ä–æ—Å–æ–≤. –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤ - —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–π –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤—å STOP.
"""


def create_database():
    conn = sqlite3.connect(config['DATABASE_NAME'])
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS interviews2 (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            start_time TEXT NOT NULL,
            end_time TEXT,
            dialog TEXT NOT NULL,
            summary TEXT
        );
    ''')
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    
    keyboard = [
        [KeyboardButton(text="üî• –ù–∞—á–∞—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≥–æ—Ä—å, —è –ø–æ–º–æ—â–Ω–∏–∫ HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –ò–¢. "
        "–Ø –∑–Ω–∞—é, —á—Ç–æ –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∫–∏–Ω—É—Ç—å –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é.\n\n" 
        "–ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–∞–π–º –±—ã–≤—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ 20-25%, "
        "—Ç–∞–∫ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —á–∞—Å—Ç–æ —É—Ö–æ–¥—è—Ç –∑–∞ –Ω–æ–≤—ã–º –æ–ø—ã—Ç–æ–º, –Ω–æ –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è. "
        "–ú–Ω–µ –±—ã –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —É –Ω–∞—Å, —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–∏ –º—ã—Å–ª–∏ "
        "–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –±—É–¥—É—â–µ–º. –ß—Ç–æ–±—ã –∫–æ–≥–¥–∞ –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –∫ –Ω–∞–º –Ω–∞ —Ä–∞–±–æ—Ç—É –º—ã —Å—Ç–∞–ª–∏ –ª—É—á—à–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é', –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
        reply_markup=reply_markup
    )
  
async def button_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å'"""
    chat_id = str(update.effective_chat.id)
    next_question = generate_next_question(chat_id, [])
    
    await update.message.reply_text(next_question)
    
    context.user_data['state'] = ACTIVE_SESSION
    context.user_data['messages'] = []
    context.user_data['last_question'] = next_question
    context.user_data['start_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

async def button_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –æ–ø—Ä–æ—Å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ, –Ω–∞–±—Ä–∞–≤ /start")
    context.user_data.clear()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != ACTIVE_SESSION:
      return

    chat_id = str(update.effective_chat.id)
        
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –¥–∏–∞–ª–æ–≥
    last_question = context.user_data.get('last_question', '')
    user_answer = update.message.text.strip()
   
    context.user_data['messages'].append({ "role": "assistant", "content": last_question })
    context.user_data['messages'].append({ "role": "user", "content": user_answer })

    try:
      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –≤ OpenRouter –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      next_question = generate_next_question(chat_id, context.user_data['messages'])     

      if "STOP" in next_question:
        await update.message.reply_text(next_question.removesuffix("STOP"))
        await finish_survey(update, context)
      else:
        context.user_data['last_question'] = next_question
        await update.message.reply_text(next_question)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def generate_next_question(employee_id, previous_answers):
    logger.info(f"–¥–∏–∞–ª–æ–≥: {previous_answers}")

    try:
      # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã
      response = client.chat.completions.create(
          model="anthropic/claude-sonnet-4",
          temperature=0.7,
          messages=[
              {"role": "system", "content": system_prompt},
              *previous_answers
          ],
      )

      logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏: {response.choices[0].message.content}")
      
      return response.choices[0].message.content

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–æ–¥–µ–ª–∏: {str(e)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def finish_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # full_dialog = '\n'.join(context.user_data.get('dialog', []))
    messages = json.dumps(context.user_data.get('messages', []), ensure_ascii=False)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = update.effective_user.id
    username = update.effective_user.username
    start_time = context.user_data.get('start_time', '')  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    final_summary = await generate_interview_summary(context.user_data.get('messages'))
    
    save_interview(user_id, username, start_time, now, messages, final_summary)
    
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n–í–∞—à –æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω.\n–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n\n{final_summary}")
    context.user_data['state'] = INACTIVE_SESSION
    del context.user_data['messages']

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.edit_message_text("–ò–Ω—Ç–µ—Ä–≤—å—é –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data['state'] = INACTIVE_SESSION
    await finish_survey(update, context)


def save_interview(user_id, username, start_time, end_time, dialog, summary):
    conn = sqlite3.connect(config['DATABASE_NAME'])
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO interviews2 (user_id, username, start_time, end_time, dialog, summary)
        VALUES (?, ?, ?, ?, ?, ?);
    """, (user_id, username, start_time, end_time, dialog, summary))
    conn.commit()
    conn.close()


async def generate_interview_summary(messages: str) -> str:
    dialog = "\n".join([f"{m['role']}: {m['content']}" for m in messages])

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ö–µ–º—ã
    response = client.chat.completions.create(
        model="anthropic/claude-sonnet-4",
        messages=[
            {
                "role": "system",
                "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ exit interview –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏: "
                           "1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —É–≤–æ–ª—å–Ω–µ–Ω–∏—è. "
                           "2. –ö—Ä–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏/–ø—Ä–æ—Ü–µ—Å—Å–æ–≤. "
                           "3. –ü–æ–∂–µ–ª–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. "
                           "4. –û–±—â–∏–π —Ç–æ–Ω –∏–Ω—Ç–µ—Ä–≤—å—é (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π). "
                           "–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."
            },
            {
                "role": "user",
                "content": dialog
            }
        ],
    )

    return response.choices[0].message.content
       



if __name__ == '__main__':
    application = ApplicationBuilder().token(config['TELEGRAM_BOT_TOKEN']).build()

    create_database()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^üî• –ù–∞—á–∞—Ç—å$"), button_start))
    application.add_handler(MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å$"), button_cancel))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("Telegram bot started...")
    application.run_polling()